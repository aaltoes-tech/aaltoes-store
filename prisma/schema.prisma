generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String    @default("/placeholder-image.jpg")
  role          String    @default("User")
  accounts      Account[]
  sessions      Session[]
  cart          Cart[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  image       String      @default("/placeholder-image.jpg")
  type        ProductType
  sizes       Size[]      @default([])
  status      ProductStatus @default(active)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model Cart {
  id        String     @id @default(cuid())
  user_id   String
  user      User       @relation(fields: [user_id], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int     @default(1)
  size      Size?   // Optional because not all products have sizes

  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  user_id   String
  user      User        @relation(fields: [user_id], references: [id])
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  phone_number String @default("")
  comment   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  total     Float

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int     @default(1)
  total     Float
  size      Size?   // Add size field to match CartItem

  @@map("order_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum ProductType {
  TSHIRT
  HOODIE
  STICKER
  MUG
  HAT
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  ONESIZE
}

enum ProductStatus {
  active
  removed
}
